install_from_swirl("Regression Models")
library(swirl)
install_from_swirl("Regression Models")
library(swirl)
swirl()
cor(gpa_nor,gch_nor)
l_nor<-lm(gch_nor~gph_nor)
l_nor<-lm(gch_nor~gpa_nor)
fit<-lm(galton$child~galton$parent)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals)^2/(n-2))
sqrt(sum(fit$residuals^2)/(n-2))
summary(fit)$sigma
deviance(fit)/(n-2)
sqrt(deviance(fit)/(n-2))
mu<-mean(galton$child)
sum((galton$child-mu)^2)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(fit$residuals)
sRes <- deviance(fit)
1-sRes/sTot
summary(fit)$r.squared
cor(galton$child,galton$parent)
cor(galton$child,galton$parent)^2
library(datasets)
require(stats)
data(swiss)
require(graphics)
?swiss
?ave
?InsectSpray
?InsectSprays
ave(InsectSprays$count,InsectSprays$spray)
InsectSprarys$count
InsectSprays$count
?relevel
?abline
data(swiss)
par(mfrow=c(2,2))
fit<-lm(Fertility~.,data=swiss)
plot(fit)
?influence.measures
?sapply
?lm
x<-rnorm(100)
y <- 2*x + 2 +rnorm(sd=0.2)
y <- 2*x + 2 +rnorm(n=100, sd=0.2)
fit<- lm(y~x)
fit
fit$coef[1]
fit$coef[2]
?cov.unscaled
library(swirl)
swirl()
all <- lm(Fertility~.,data=swiss)
summary(all)
lm(Fertility~Agriculture)
lm(Fertility~Agriculture,data=swiss)
summary(lm(Fertility ~ Agriculture, swiss))
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- sum(swiss$Examination,swiss$Catholic)
ec <- swiss$Examination+swiss$Catholic
efit <- lm(Fertility~.+ec,data=swiss)
all$coef=efit$coef
all$coefficients-efit$coefficients
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
sB
summary(InsectSprays$spray)
summary(InsectSprays[,2])
sapply(InsectSprays,2,class)
sapply
sapply(InsectSprays,class)
fit<-lm(count~spray)
fit<-lm(count~spray,data=InsectSprays)
summary(fit$coef)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count~spray-1)
nfit <- lm(count~spray-1,data=swiss)
nfit <- lm(count~spray-1,data=InsectSprays)
summary(nfit)$coef
spray2<-relevel(InsectSprays@spray,"C")
spray2<-relevel(InsectSprays@spray,C)
spray2<-relevel(InsectSprays$spray,"C")
fit2 <- lm(count~spray2,InsectSprays)
summary(fit2)$coef
mean(sC)
(fit$coef[3]-fit$coef[2])/1.6011
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric~Year,hunger)
summary(fit)$coef
lmF <- (Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"],hunger)
lmF <- lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"],hunger)
lmM <- lm(Numeric[hunger$Sex=="Male"]~Year[hunger$Sex=="Male"],hunger)
lmBOth <- (Numeric~Year+Sex,hunger)
lmBOth <- lm(Numeric~Year+Sex,hunger)
lmBOth <- lm(Numeric~Year+Sex,hunger)
lmBoth <- lm(Numeric ~ Year+Sex,hunger)
summary(lmBoth)
lmInter <- lm(Numeric~Year+Sex+Sex*Year,hunger)
summary(lmInter)
fit <- lm(y~x,out2)
plot(fit,which=1)
fitno <- lm(y~x,out[-1,])
fitno <- lm(y~x,out2[-1,])
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"] - predict(fitno,out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma <- sqrt(sum(resid(fit)^2)/)
sigma <- sqrt(sum(resid(fit)^2)/len(out2))
s
summary(fit)
sigma <- sqrt(sum(resid(fit)^2)/df.residual(fit))
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit[1])/(sigma1*sqrt(1-harvalues(fit)p[1]))
resid(fit[1])/(sigma1*sqrt(1-harvalues(fit)[1]))
resid(fit[1])/(sigma1*sqrt(1-hatvalues(fit)[1]))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno,out2) - predict(fit,out2)
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility~.,swiss)
vif(mdl)
mdl2 <- lm(Fertility~Agriculture,Education,Catholic,Infant.Mortality,swiss)
mdl2 <- lm(Fertility~Agriculture+Education+Catholic+Infant.Mortality,swiss)
vif(mdl2)
library(swirl)
swirl()
quit()
library(swirl)
swirl()
ravenData
mdl <- glm(ravenWinNum ~ ravenScore, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family = "binomial",ravenData)
predict(mdl,data.frame(ravenScore=c(0,3,6)))
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
2
exit()
exit()
quit
quit()
library(swirl)
swirl()
var(rpois(1000,50))
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits~date,poisson,hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lamdha <- mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(.95,lambda)
mdl1 <- glm(visits ~ date,offset=log(visits+1),poisson,hits)
mdl2 <- glm(visits ~ date,offset=log(visits+1),poisson,hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits,
| offset = log(visits + 1))
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits,offset = log(visits + 1))
qpois(.95,mdl2$fitted.values[704])
library(MASS)
head(shuttle)
fit <- glm(use ~ wind,binomial,shuttle)
summary(fit)
head(InsectSprays)
fit <- glm(count~factor(spray)-1,poisson,InsectSprays)
summary(fit)
exp(coef(fit))
14.5/15.333333
a <- c(79.34175727,83.41056534,106.7561385,98.75567845)
b <- c(95.3815261,74.47973713,90.36144578,88.04448563)
t.test(a,b)
install.packages("caret")
install.packages("kernlab")
library(caret)
library(kernlab)
data(spam)
head(spam)
install.packages("ISLR")
library(ISLR);library(ggplot2);library(caret);
data(Wage)
summary(Wage)
inTrain <- creatDataPartition(y=Wage$wage,p=0.7,list=FALSE)
inTrain <- createDataPartition(y=Wage$wage,p=0.7,list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
featurePlot(x=training[,c("age","education","jobclass")],y=training$wage,plot="pairs")
library(Hmisc)
cutWage <- cut2(training$wage,g=3)
table(cutWage)
dim(training)
dim(training)[1]
?rbinom
rbinom(20,size=1,prob=0.1)
rbinom(20,size=0,prob=0.1)
rbinom(20,size=2,prob=0.1)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
IL_col_idx
preObj <- preProcess(training[, IL_col_idx], method=c("center", "scale", "pca"), thresh=0.8)
preObj
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
IL_col_idx <- grep("^[Ii][Ll].*", names(training))
new_training <- training[,c(names(training)[IL_col_idx],"diagnosis")]
names(new_training)
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
library(dplyr)
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
suppressMessages(library(dplyr))
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
library(caret)
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
install.packages('e1071', dependencies=TRUE)
non_pca_model <- train(diagnosis ~ ., data=new_training, method="glm")
IL_col_idx <- grep("^[Ii][Ll].*", names(testing))
suppressMessages(library(dplyr))
new_testing <- testing[, c(names(testing)[IL_col_idx], "diagnosis")]
names(new_testing)
non_pca_result <- confusionMatrix(new_testing[, 13], predict(non_pca_model, new_testing[, -13]))
non_pca_result
setwd("C:/Users/Sixing Li/Documents/DSS/PML")
trainingUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testingUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(trainingUrl, "pml-training.csv", method = "curl")
training <- read.csv("pml-training.csv",na.strings = c("","NA","#DIV/0!"))
testing <- read.csv("pml-testing.csv",na.strings = c("","NA","#DIV/0!"))
str(training)
train <- read.csv("pml-training.csv",na.strings = c("","NA","#DIV/0!"))
test <- read.csv("pml-testing.csv",na.strings = c("","NA","#DIV/0!"))
table(train$classe)
library(caret)
set.seed(1234)
inTrain <- createDataPartition(train$classe, p=0.75, list = FALSE)
training <- train[inTrain,]
testing <- train[-inTrain,]
trainRM <- training[, which(as.numeric(colSums(is.na(training)))==0)]
nzv <- nearZeroVar(trainRM)
trainRM <- trainRM[, -nzv]
trainRM <- trainRM[,-(1:7)]
library(randomForest)
modelFit <- train(classe ~ ., data = trainRM, method="rf",importance=TRUE)
library(randomForest)
modelFit <- train(classe ~ ., data = trainRM, method="rf",importance=TRUE,ntrees = 10)
modelFit <- train(classe ~ ., data = trainRM, method="rf",importance=TRUE,ntrees = 10,proximity=TRUE,do.trace=TRUE)
